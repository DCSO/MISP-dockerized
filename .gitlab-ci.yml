image: docker:latest

services:
  - docker:dind

stages:
- build
- test
- scan
- deploy

variables:
  # The following variables are setup via gitlab project group:
    # DOCKER_SLUG
    # DOCKER_USERNAME
    # DOCKER_PASSWORD
    # CUSTOM_REGISTRY_URL
    # CUSTOM_REGISTRY_USER
    # CUSTOM_REGISTRY_PW
  # Set via Job:
    # CURRENT_VERSION
  DOCKER_DRIVER: overlay2

before_script:
# Include Variables
- source .ci/00_vars.sh
# Install dependencies
- .ci/01_before_install.sh



# On all other pull requests and branches exclude dev and master: Build Environment, but do nothing more. No tests. Tests with our Test Framework are only done in the dev branch.
.env_test_only:
  stage: build
  except:
  - master
  - dev
  - 1.2.0
  script:
    # Test
  - make -C .ci script REPOURL=$CUSTOM_REGISTRY_URL USER=$CUSTOM_REGISTRY_USER PW=$CUSTOM_REGISTRY_PW TEST=no_test VERSION=$CURRENT_VERSION
    # Clean Up
  - echo "##### clean up..." &&  make -C $FOLDER delete

.env_test_only_hub.docker.com:
  stage: build
  except:
  - master
  - dev
  - 1.2.0
  script:
    # Test
  - make -C .ci script REPOURL=$DOCKER_SLUG USER=$DOCKER_USERNAME PW=$DOCKER_PASSWORD TEST=no_test VERSION=$CURRENT_VERSION
    # Clean Up
  - echo "##### clean up..." &&  make -C $FOLDER delete


  
# On dev Branch: Build Environment and Test it with our own Test Framework
.long_test:
  stage: test
  only:
  - dev
  - 1.2.0
  - bug/MDD-200
  allow_failure: true
  script:
    # Test
  - make -C .ci script REPOURL=$CUSTOM_REGISTRY_URL USER=$CUSTOM_REGISTRY_USER PW=$CUSTOM_REGISTRY_PW TEST=long_test VERSION=$CURRENT_VERSION
    # Tag
  - make -C .ci tag REPOURL=$CUSTOM_REGISTRY_URL USER=$CUSTOM_REGISTRY_USER PW=$CUSTOM_REGISTRY_PW
    # Clean Up
  - echo "##### clean up..." &&  make -C $FOLDER delete
  # https://docs.gitlab.com/ee/ci/yaml/README.html#artifacts-reports
  artifacts:
    paths: 
    - .ci/reports/*.xml
    reports:
      junit: .ci/reports/*.xml

# On dev Branch: Build Environment and Test it with our own Test Framework
.long_test_hub.docker.com:
  stage: test
  only:
  - dev
  - 1.2.0
  - bug/MDD-200
  script:
    # Test
  - make -C .ci script REPOURL=$DOCKER_SLUG USER=$DOCKER_USERNAME PW=$DOCKER_PASSWORD TEST=long_test VERSION=$CURRENT_VERSION
    # Tag 
  - make -C .ci tag REPOURL=$DOCKER_SLUG USER=$DOCKER_USERNAME PW=$DOCKER_PASSWORD
    # Clean Up
  - echo "##### clean up..." &&  make -C $FOLDER delete
  # https://docs.gitlab.com/ee/ci/yaml/README.html#artifacts-reports
  artifacts:
    paths: 
    - .ci/reports/*.xml
    reports:
      junit: .ci/reports/*.xml



# On MASTER Branch: Build Environment + retag Images to remove "-dev" tag
.push_productive_images:
  stage: deploy
  only: 
  - master
  - schedules
  script:
  # Check internal Registry
    # Test
  - make -C .ci script REPOURL=$CUSTOM_REGISTRY_URL USER=$CUSTOM_REGISTRY_USER PW=$CUSTOM_REGISTRY_PW TEST=long_test VERSION=$CURRENT_VERSION
    # Tag
  - make -C .ci tag REPOURL=$CUSTOM_REGISTRY_URL USER=$CUSTOM_REGISTRY_USER PW=$CUSTOM_REGISTRY_PW
    # Push
  - make -C .ci push REPOURL=$CUSTOM_REGISTRY_URL USER=$CUSTOM_REGISTRY_USER PW=$CUSTOM_REGISTRY_PW
    # Clean Up
  - echo "##### clean up..." &&  make -C $FOLDER delete
  # https://docs.gitlab.com/ee/ci/yaml/README.html#artifacts-reports
  artifacts:
    paths: 
    - .ci/reports/*.xml
    reports:
      junit: .ci/reports/*.xml

.push_productive_images_hub.docker.com:
  stage: deploy
  only: 
  - master
  - schedules
  script:
  # Check hub.docker.com Registry
    # Test
  - make -C .ci script REPOURL=$DOCKER_SLUG USER=$DOCKER_USERNAME PW=$DOCKER_PASSWORD TEST=long_test VERSION=$CURRENT_VERSION
    # Tag 
  - make -C .ci tag REPOURL=$DOCKER_SLUG USER=$DOCKER_USERNAME PW=$DOCKER_PASSWORD
    # Push 
  - make -C .ci push REPOURL=$DOCKER_SLUG USER=$DOCKER_USERNAME PW=$DOCKER_PASSWORD
    # Clean Up
  - echo "##### clean up..." &&  make -C $FOLDER delete
  # https://docs.gitlab.com/ee/ci/yaml/README.html#artifacts-reports
  artifacts:
    paths: 
    - ./.ci/reports/*.xml
    reports:
      junit: ./.ci/reports/*.xml



.container_scanning:
  # https://docs.gitlab.com/ee/ci/examples/container_scanning.html
  # https://docs.gitlab.com/ee/ci/yaml/README.html#artifactsreportscontainer_scanning
  # https://docs.gitlab.com/ee/user/project/merge_requests/container_scanning.html
  # https://docs.gitlab.com/ee/ci/yaml/#artifactsreportscontainer_scanning-ultimate
  stage: scan
  variables:
    DOCKER_DRIVER: overlay2
    ## Define two new variables based on GitLab's CI/CD predefined variables
    ## https://docs.gitlab.com/ee/ci/variables/#predefined-variables-environment-variables
  allow_failure: true
  script:
  - bash .ci/10_scanning.sh
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json


include:
  #- '0.1.0/.gitlab-ci.yml'
  #- '0.1.1/.gitlab-ci.yml'
  #- '0.1.2/.gitlab-ci.yml'
  #- '0.2.0/.gitlab-ci.yml'
  #- '0.3.0/.gitlab-ci.yml'
  #- '0.3.1/.gitlab-ci.yml'
  #- '0.3.2/.gitlab-ci.yml'
  #- '0.3.3/.gitlab-ci.yml'
  #- '0.3.4/.gitlab-ci.yml'
  #- '1.0.0/.gitlab-ci.yml'
  #- '1.0.1/.gitlab-ci.yml'
  #- '1.0.2/.gitlab-ci.yml'
  #- '1.0.3/.gitlab-ci.yml'
  #- '1.1.0/.gitlab-ci.yml'
  - '1.1.1/.gitlab-ci.yml'
