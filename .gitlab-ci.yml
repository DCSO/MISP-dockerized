image: docker:latest

services:
  - docker:dind

stages:
- build
- scan
- deploy

variables:
  #CONTAINER_TEST_IMAGE: my-docker-hub/$CI_PROJECT_ID:$CI_BUILD_REF_NAME_test
  # The following variables are setup via gitlab project group:
  # DOCKER_HUB_TOKEN
  # DOCKER_USERNAME
  # DOCKER_PASSWORD
  # INTERNAL_REGISTRY_HOST
  # INTERNAL_REGISTRY_USER
  # INTERNAL_REGISTRY_PW
  CURRENT_VERSION: "1.0.0"
  FOLDER: "./current"
  ENV_OPTION: "$FOLDER/"
  makefile_travis: "make -C $FOLDER/.travis/"
  CI: "true"
  REPOURL: "dockerhub.dcso.de"


# Include other YML Files for Jobs## Changelog for Release Candidate 1.0.0
This release represents the first production release of MISP-Dockerized in version 1.0.0.

### About
MISP dockerized is a project designed to provide an easy-to-use and easy-to-install 'out of the box' MISP instance that includes everything you need to run MISP with minimal host-side requirements.

MISP dockerized uses MISP (Open Source Threat Intelligence Platform - https://github.com/MISP/MISP), which is maintained and developed by the MISP project team (https://www.misp-project.org/).

MISP-dockerized provides the following features:
* 3-steps (in 5 minute or less) ready MISP instance
* Built in MISP modules
* Built in mail transport via postfix
* Prehardened TLS configuration
* Default http to https redirect
* Easy-to-use script based backup and restore function
* Prebuilt management commands to ease maintenance efforts
* Periodically built Docker containers
* Automated test framework to test new MISP releases

-----------------------------
### Update Informations
This release includes the new MISP server container version 2.4.99

In addition, we have changed the following:
- the proxy container version to the latest version 1.X
- the robot container version to the latest version 2.X
- the misp-module container version to the latest version 1.X

### General Changes
- We have changed our complete directories. Now you have access to all unsupported and old version of MISP-dockerized.
- There is a new NEW_FRESH_INSTAL.sh script
- We have added a new UPGRADE.sh script
- We have added a new UPDATE.sh script
- Added the new MISP-Server Container with MISP Version 2.4.99 (#39)

### Detailed Changes
#### Main Repository
##### Detailed Changes, Fixes & Improvements
- Deactivated the Ansible script for database and server, because since version 2.4.97 the misp-server container does not require Ansible anymore
- Changed misp-robot from 1.0.3-ubuntu to 2.x-debian
- Changed misp-server from 2.4.94 to 2.4.99
- Removed unused container content in docker-compose.yml
- Added docker-compose.override.yml to add the user configuration
- Removed misp-postfix container, because postfix is now directly installed in the misp-server
- Changed volume paths from misp-server (done since version 0.3.4)

#### Container `misp-dockerized-server`
##### Update Informations
Features of the release:
- Added a new MISP-Server Container for MISP release 2.4.99 on base of 2.4.97. (closes #39)
  For more information please have a look at the official changelog at https://github.com/MISP/MISP/releases/tag/v2.4.99
- Changed to a new gitlab-ci job structure for all misp-server container
- Built in mail transport via postfix
- Built in redis
- Built in rsyslog-ng
- Built in MariaDB

##### Detailed Changes, Fixes & Improvements
- The following base changes were made in addition to the new `misp-server version 2.4.97`:
   - The base image is now **debian stretch** instead of ubuntu 18.04
   - Postfix is now directly installed - the postfix container is no longer necessary 
   - Added a cron shell script that fetches and caches all enabled feeds and pull all remote server events
   - Changed from syslog-ng to rsyslog, because in debian the syslog-ng doesn't support wildcard configuration for logfiles.
   - **The external requirement for our Ansible playbook is no longer necessary for this container**
- Gitlab-CI Strucutre
  Included statements in the Gitlab CI main file allow us to improve and simplify our Gitlab CI main file.
- Added an echo tag  to know from which entrypoint script a message comes.
- Added on the misp-server 2.4.97-2.4.99 functions to create self-signed certificate, private key and DH params file



#### Container `misp-dockerized-robot`
##### Update Informations 
Features of the release:
- Built in Docker
- Built in Ansible
- Built in Test framework
- Docker Container image is based now on debian:stretch-slim

In the past, we decided to use a three-digit version number for small and large changes for this container repository. This has proved unnecessary as the main repository is the central repository for new releases and all changes are already tracked here. We have therefore decided to change the 3-digit version number in all minor repositories to a 2-digit version number.
For example: 1.0.1 -> 1.1

The second digit is changed any time we make minor changes. The first digit changes whenever we make major changes, e.g. a new base image.

##### Detailed Changes, Fixes & Improvements
- Changed from the base image debian:stable-slim to debian:stretch-slim 
- Remove unused robot versions:
    - 1.0.2-debian
    - 1.0.3-debian
    - 1.0.4-ubuntu
- All folders have been renamed, e.g. from 1.0.0.0-alpin to 1.0-alpin.
- We have made working with gitlab-ci easier with new extensions and includes.
- We have also reduced the readme as much as possible, as the documentation is now available centrally in our own documentation repository `https://dcso.github.io/MISP-dockerized-docs/`.

#### Container `misp-dockerized-proxy`
##### Update Informations 
Features of the release:
- Prehardened TLS configuration
- Default http to https redirect
- Built in User defined IP restriction
- Added the ability to create self-signed certificates.

In the past, we decided to use a three-digit version number for small and large changes for this container repository. This has proved unnecessary as the main repository is the central repository for new releases and all changes are already tracked here. We have therefore decided to change the 3-digit version number in all minor repositories to a 2-digit version number.
For example: 1.0.1 -> 1.1

The second digit is changed any time we make minor changes. The first digit changes whenever we make major changes, e.g. a new base image.


##### Detailed Changes, Fixes & Improvements
- Added an own entrypoint script to create user defined files
- Added the possibility to create self-signed certificates
- All folders have been renamed, e.g. from 1.0.0.0-alpin to 1.0-alpin.
- We have made working with gitlab-ci easier with new extensions and includes.
- We have also reduced the readme as much as possible, as the documentation is now available centrally in our own documentation repository `https://dcso.github.io/MISP-dockerized-docs/`.


#### Container `misp-dockerized-misp-modules`
##### Update Informations 
Features of the release:
- Pre-Installed MISP modules

In the past, we decided to use a three-digit version number for small and large changes for this container repository. This has proved unnecessary as the main repository is the central repository for new releases and all changes are already tracked here. We have therefore decided to change the 3-digit version number in all minor repositories to a 2-digit version number.
For example: 1.0.1 -> 1.1

The second digit is changed any time we make minor changes. The first digit changes whenever we make major changes, e.g. a new base image.

##### Detailed Changes, Fixes & Improvements
- Pre-Installed debian stretch MISP modules container
- All folders have been renamed, e.g. from 1.0.0.0-debian to 1.0-debian.
- We have made working with gitlab-ci easier with new extensions and includes.
- We have also reduced the readme as much as possible, as the documentation is now available centrally in our own documentation repository `https://dcso.github.io/MISP-dockerized-docs/`.
# Source: https://docs.gitlab.com/ee/ci/yaml/README.html#include
include:
  #- '0.1.0/.gitlab-ci.yml'
  #- '0.1.1/.gitlab-ci.yml'
  #- '0.1.2/.gitlab-ci.yml'
  #- '0.2.0/.gitlab-ci.yml'
  #- '0.3.0/.gitlab-ci.yml'
  #- '0.3.1/.gitlab-ci.yml'
  #- '0.3.2/.gitlab-ci.yml'
  #- '0.3.3/.gitlab-ci.yml'
  #- '0.3.4/.gitlab-ci.yml'
  - '1.0.0/.gitlab-ci.yml'
  


before_script:
  - apk add --no-cache make bash sudo git curl python py2-pip coreutils grep python3
  # https://stackoverflow.com/questions/42295457/using-docker-compose-in-a-gitlab-ci-pipeline
  - pip3 install --no-cache-dir docker-compose
  - docker-compose -v
  - echo "$INTERNAL_REGISTRY_PW"| docker login -u "$INTERNAL_REGISTRY_USER" "$INTERNAL_REGISTRY_HOST" --password-stdin
  # Choose the Environment Version
  - bash ./FOR_NEW_INSTALL.sh $CURRENT_VERSION
  # Pull all latest tagged container
  - $makefile_travis pull-latest REPOURL=${REPOURL}

# On all other pull requests and branches exclude dev and master: Build Environment, but do nothing more. No tests. Tests with our Test Framework are only done in the dev branch.
.env_test_only:
  stage: build
  except:
  - master
  - dev
  script:
  # Deploy Environment
  - make -C $FOLDER build-config
  - cd $FOLDER; docker-compose pull; cd ..
  # Deploy Environment
  - make -C $FOLDER deploy
  - docker ps -a
  - make -C $FOLDER delete

# On dev Branch: Build Environment and Test it with our own Test Framework
.long_test:
  stage: build
  only:
  - dev
  allow_failure: true
  script:
  - make -C $FOLDER build-config
  - cd $FOLDER; docker-compose pull; cd ..
  # Deploy Environment
  - make -C $FOLDER deploy
  - docker ps -a
  # Testing
  - $makefile_travis test
  - make -C $FOLDER delete
  # https://docs.gitlab.com/ee/ci/yaml/README.html#artifacts-reports
  artifacts:
    reports:
      junit: ./current/.travis/reports/*.xml


# On MASTER Branch: Build Environment + retag Images to remove "-dev" tag
.push_productive_images:
  stage: deploy
  only: 
  - master
  script:
  - make -C $FOLDER build-config
  - cd $FOLDER; docker-compose pull; cd ..
  # Deploy Environment
  - make -C $FOLDER deploy
  - docker ps -a
  # Testing
  - $makefile_travis test
  # prepare retagging
  - export server_tag=$(cat $FOLDER/docker-compose.yml |grep image|grep server|cut -d ':' -f 3)
  - export proxy_tag=$(cat $FOLDER/docker-compose.yml |grep image|grep proxy|cut -d ':' -f 3)
  - export robot_tag=$(cat $FOLDER/docker-compose.yml |grep image|grep robot|cut -d ':' -f 3)
  #- export postfix_tag=$(cat $FOLDER/docker-compose.yml |grep image|grep server|cut -d ':' -f 3)
  - export modules_tag=$(cat $FOLDER/docker-compose.yml |grep image|grep modules|cut -d ':' -f 3)
  - export db_tag=$(cat $FOLDER/docker-compose.yml |grep image|grep db|cut -d ':' -f 3)
  - export redis_tag=$(cat $FOLDER/docker-compose.yml |grep image|grep redis|cut -d ':' -f 3)
  # retag all existing tags dev 2 public repo
  - $makefile_travis tag REPOURL=$REPOURL server_tag=${server_tag} proxy_tag=${proxy_tag} robot_tag=${robot_tag} postfix_tag=${postfix_tag} modules_tag=${modules_tag} db_tag=${modules_tag} redis_tag=${modules_tag}
  # Push Images to registry
  - $makefile_travis push REPOURL=$REPOURL server_tag=${server_tag} proxy_tag=${proxy_tag} robot_tag=${robot_tag} postfix_tag=${postfix_tag} modules_tag=${modules_tag};
  - make -C $FOLDER delete
  # https://docs.gitlab.com/ee/ci/yaml/README.html#artifacts-reports
  artifacts:
    paths: 
    - ./current/.travis/reports/*.xml
    reports:
      junit: ./current/.travis/reports/*.xml


# deactivated:
# https://docs.gitlab.com/ee/ci/examples/container_scanning.html
# https://docs.gitlab.com/ee/ci/yaml/README.html#artifactsreportscontainer_scanning
# https://docs.gitlab.com/ee/user/project/merge_requests/container_scanning.html
# https://docs.gitlab.com/ee/ci/yaml/#artifactsreportscontainer_scanning-ultimate

.container_scanning:
  stage: scan
  #image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
    ## Define two new variables based on GitLab's CI/CD predefined variables
    ## https://docs.gitlab.com/ee/ci/variables/#predefined-variables-environment-variables
    CI_CONTAINER_NAME: misp-dockerized-server
    CI_APPLICATION_REPOSITORY: $INTERNAL_REGISTRY_HOST/$CI_CONTAINER_NAME
    CI_APPLICATION_TAG: latest-dev
  allow_failure: true
  #services:
  #  - docker:stable-dind
  script:
    - echo "$INTERNAL_REGISTRY_PW"| docker login -u "$INTERNAL_REGISTRY_USER" "$INTERNAL_REGISTRY_HOST" --password-stdin
    - docker run -d --name db arminc/clair-db:latest
    - docker run -p 6060:6060 --link db:postgres -d --name clair --restart on-failure arminc/clair-local-scan:v2.0.1
    - docker ps
    - apk add -U wget ca-certificates
    - docker pull ${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_TAG}
    - wget https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64
    - mv clair-scanner_linux_amd64 clair-scanner
    - chmod +x clair-scanner
    - touch clair-whitelist.yml
    #- while( ! wget -q -O /dev/null http://localhost:6060/v1/namespaces ) ; do sleep 1 ; done
    #- retries=0
    - docker ps -a
    - echo "Waiting for clair daemon to start"
    - bash -c 'while( ! wget -T 10 -q -O /dev/null http://localhost:6060/v1/namespaces ) ; do sleep 1 ; echo -n "." ; if [ $retries -eq 10 ] ; then echo " Timeout, aborting." ; exit 1 ; fi ; retries=$(($retries+1)) ; done'
    - bash -c ''./clair-scanner -c http://localhost:6060 --ip $(hostname -i) -r gl-container-scanning-report.json -l clair.log -w clair-whitelist.yml ${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_TAG} || true'
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json