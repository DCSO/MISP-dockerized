image: docker:latest

services:
  - docker:dind

stages:
- build
- deploy

variables:
  #CONTAINER_TEST_IMAGE: my-docker-hub/$CI_PROJECT_ID:$CI_BUILD_REF_NAME_test
  # The following variables are setup via gitlab project group:
  # DOCKER_HUB_TOKEN
  # DOCKER_USERNAME
  # DOCKER_PASSWORD
  # INTERNAL_REGISTRY_HOST
  # INTERNAL_REGISTRY_USER
  # INTERNAL_REGISTRY_PW
  CURRENT_VERSION: "0.3.4"
  DOCKER_COMPOSE_VERSION: "1.22.0"
  FOLDER: "./current"
  ENV_OPTION: "$FOLDER/"
  MYmake_travis: "make -C $FOLDER/.travis/"
  CI: "true"
  REPOURL: "dockerhub.dcso.de"


# Include other YML Files for Jobs
# Source: https://docs.gitlab.com/ee/ci/yaml/README.html#include
include:
  - '0.1.0/.gitlab-ci.yml'
  - '0.1.1/.gitlab-ci.yml'
  - '0.1.2/.gitlab-ci.yml'
  - '0.2.0/.gitlab-ci.yml'
  - '0.3.0/.gitlab-ci.yml'
  - '0.3.1/.gitlab-ci.yml'
  - '0.3.2/.gitlab-ci.yml'
  - '0.3.3/.gitlab-ci.yml'
  #- '0.3.4/.gitlab-ci.yml'
  #- '1.0.0/.gitlab-ci.yml'
  


before_script:
  - apk add --no-cache make bash sudo git curl python py2-pip coreutils grep
  - docker login -u "$INTERNAL_REGISTRY_USER" -p "$INTERNAL_REGISTRY_PW" "$INTERNAL_REGISTRY_HOST"
  # https://stackoverflow.com/questions/42295457/using-docker-compose-in-a-gitlab-ci-pipeline
  - pip install --no-cache-dir docker-compose
  - docker-compose -v
  # switch to current VERSION
  - ln -s $CURRENT_VERSION/ current
  # download latest images from registry
  - $MYmake_travis pull-latest REPOURL=${REPOURL}


# On all other pull requests and branches exclude dev and master: Build Environment, but do nothing more. No tests. Tests with our Test Framework are only done in the dev branch.
env_test_only:
  stage: build
  except:
  - master
  - dev
  script:
  - cd $FOLDER;           # change directory 
  - make build-config     # we need a .env file therefore we need to build the config before we pull the images.
  - docker-compose pull   # pull images, because docker login is only valid for the host not for the misp-robot
  - make install


# On dev Branch: Build Environment and Test it with our own Test Framework
long_test:
  stage: build
  only:
  - dev
  script:
  - cd $FOLDER;           # change directory 
  - make build-config     # we need a .env file therefore we need to build the config before we pull the images.
  - docker-compose pull   # pull images, because docker login is only valid for the host not for the misp-robot
  - make install
  - $MYmake_travis test
  # https://docs.gitlab.com/ee/ci/yaml/README.html#artifacts-reports
  # artifacts:
  #   reports:
  #     junit: $FOLDER/.travis/test_report.xml


# On MASTER Branch: Build Environment + retag Images to remove "-dev" tag
push_productive_images:
  stage: deploy
  only: 
  - master
  script:
  - cd $FOLDER;
  - make build-config
  - docker-compose pull
  # start deploy script
  - make install
  # test if MISP is ready
  - $MYmake_travis test
  # prepare retagging
  - export server_tag=$(cat $ENV_FOLDER.env |grep MISP_CONTAINER|cut -d = -f 2|sed 's,....$,,')
  - export proxy_tag=$(cat $ENV_FOLDER.env |grep PROXY_CONTAINER|cut -d = -f 2|sed 's,....$,,')
  - export robot_tag=$(cat $ENV_FOLDER.env |grep ROBOT_CONTAINER|cut -d = -f 2|sed 's,....$,,')
  - export postfix_tag=$(cat $ENV_FOLDER.env |grep POSTFIX_CONTAINER|cut -d = -f 2|sed 's,....$,,')
  - export postfix_tag=$(cat $ENV_FOLDER.env |grep POSTFIX_CONTAINER|cut -d = -f 2|sed 's,....$,,')
  - export modules_tag=$(cat $ENV_FOLDER.env |grep MISP_MODULES_CONTAINER|cut -d = -f 2|sed 's,....$,,')
  - export db_tag=$(cat $ENV_FOLDER.env |grep DB_CONTAINER_TAG|cut -d = -f 2|sed 's,....$,,')
  - export redis_tag=$(cat $ENV_FOLDER.env |grep REDIS_CONTAINER_TAG|cut -d = -f 2|sed 's,....$,,')
  # retag all existing tags dev 2 public repo
  - $MYmake_travis tag server_tag=${server_tag} proxy_tag=${proxy_tag} robot_tag=${robot_tag} postfix_tag=${postfix_tag} modules_tag=${modules_tag} REPOURL=${REPOURL};
  # Push Images to registry
  - $MYmake_travis push server_tag=${server_tag} proxy_tag=${proxy_tag} robot_tag=${robot_tag} postfix_tag=${postfix_tag} modules_tag=${modules_tag} REPOURL=${REPOURL};
  # If we need separate Images fro DB and Redsi
  #- ./travis/push.sh $(REPOURL)/misp-dockerized-db $(db_tag);
  #- ./travis/push.sh $(REPOURL)/misp-dockerized-redis $(redis_tag);
