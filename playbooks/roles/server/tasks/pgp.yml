- name: PGP | check if PGP public file  exists
  tags: pgp
  stat: 
    path: "{{MAIN_REPO_CONFIG}}/pgp/{{PGP_PUBLIC_FILENAME}}"
  register: public_file

- name: PGP | check if PGP private file exists
  tags: pgp
  stat: 
    path: "{{MAIN_REPO_CONFIG}}/pgp/{{PGP_PRIVATE_FILENAME}}"
  register: private_file

################
# IMPORT PGP Keys
################
- name: PGP | Import Private and Public Key
  tags: pgp
  shell: gpg --import --homedir "{{PGP_HOMEDIR}}" "{{ item }}"
  with_items:
  - "{{PGP_PUBLIC_FILENAME}}"
  - "{{PGP_PRIVATE_FILENAME}}"
  when: (public_file.stat.exists == True) and (private_file.stat.exists == True)  

###############
# CREATE A NEW PGP KEys
###############

- name: PGP | Copy Template gen_pgp.sh script
  tags: pgp
  template:
    src: template/{{ item }}.j2
    dest: "/{{ item }}"
    owner: root
    group: root
    mode: 0740
  with_items:
    - gen_pgp.sh


- name: PGP | Generate a more high entropy
  tags: pgp
  shell: rngd -r /dev/urandom
  when: (public_file.stat.exists == False) and (private_file.stat.exists == False)  


# - name: PGP | Generate a new Private and Public Key - This can take a long time, so take a break and enjoy a cup of tea or coffee.
#   tags: pgp
#   shell: cd "{{PGP_HOMEDIR}}"; /gen_pgp.sh    
#  when: (public_file.stat.exists == False) and (private_file.stat.exists == False)  


# - name: PGP | Delete gen_pgp.sh script
#   tags: pgp
#   file:
#     state: absent
#     path: /gen_pgp.sh  

# - name: PGP | Copy created public and private key back to outer MISP-dockerized GIT folder
#   tags: pgp
#   shell: "cp {{PGP_HOMEDIR}}/{{ item }} {{MAIN_REPO_CONFIG}}/pgp/"
#   with_items:
#   - "{{PGP_PUBLIC_FILENAME}}"
#   - "{{PGP_PRIVATE_FILENAME}}"
#   when: (public_file.stat.exists == False) and (private_file.stat.exists == False)